// Code generated by Microsoft (R) AutoRest Code Generator 0.9.7.0
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Rest;
using WTM.RestApi.Client.Models;

namespace WTM.RestApi.Client
{
    public partial interface IShot
    {
        /// <param name='id'>
        /// Required. Shot ID
        /// </param>
        /// <param name='request'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        Task<HttpOperationResponse<bool>> AddBookmarksWithOperationResponseAsync(int id, BookmarksAddRequest request, CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        
        /// <param name='id'>
        /// Required. Shot ID
        /// </param>
        /// <param name='request'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        Task<HttpOperationResponse<bool>> AddFavouriteWithOperationResponseAsync(int id, FavouritesAddRequest request, CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        
        /// <param name='id'>
        /// Required. Shot ID
        /// </param>
        /// <param name='request'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        Task<HttpOperationResponse<bool>> AddTagWithOperationResponseAsync(int id, TagsAddRequest request, CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        
        /// <param name='id'>
        /// Required. Shot ID
        /// </param>
        /// <param name='request'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        Task<HttpOperationResponse<bool>> DeleteBookmarkWithOperationResponseAsync(int id, BookmarksDeleteRequest request, CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        
        /// <param name='id'>
        /// Required. Shot ID
        /// </param>
        /// <param name='request'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        Task<HttpOperationResponse<bool>> DeleteFavouriteWithOperationResponseAsync(int id, FavouritesDeleteRequest request, CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        
        /// <param name='id'>
        /// Required. Shot ID
        /// </param>
        /// <param name='request'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        Task<HttpOperationResponse<bool>> DeleteTagWithOperationResponseAsync(int id, TagsAddRequest request, CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        
        /// <param name='date'>
        /// Required. Date
        /// </param>
        /// <param name='start'>
        /// Optional.
        /// </param>
        /// <param name='limit'>
        /// Optional.
        /// </param>
        /// <param name='token'>
        /// Optional. Session token
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<ShotOverviewResponse>>> FindByDateWithOperationResponseAsync(DateTimeOffset date, int? start = null, int? limit = null, string token = null, CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        
        /// <param name='name'>
        /// Required. Movie name
        /// </param>
        /// <param name='token'>
        /// Optional. Session token
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<ShotOverviewResponse>>> FindByMovieWithOperationResponseAsync(string name, string token = null, CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        
        /// <param name='tags'>
        /// Required. Tags
        /// </param>
        /// <param name='start'>
        /// Optional.
        /// </param>
        /// <param name='limit'>
        /// Optional.
        /// </param>
        /// <param name='token'>
        /// Optional. Session token
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<ShotOverviewResponse>>> FindByTagWithOperationResponseAsync(string tags, int? start = null, int? limit = null, string token = null, CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        
        /// <param name='date'>
        /// Optional. Date
        /// </param>
        /// <param name='start'>
        /// Optional. Start element
        /// </param>
        /// <param name='limit'>
        /// Optional. Max number of element
        /// </param>
        /// <param name='token'>
        /// Optional. Session token
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<ShotOverviewResponse>>> GetArchivesWithOperationResponseAsync(DateTimeOffset? date = null, int? start = null, int? limit = null, string token = null, CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        
        /// <param name='request'>
        /// Required.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<ShotOverviewResponse>>> GetBookmarksWithOperationResponseAsync(BookmarksGetRequest request, string id, CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        
        /// <param name='id'>
        /// Required. Shot ID
        /// </param>
        /// <param name='token'>
        /// Optional. Session token
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetByIdWithOperationResponseAsync(int id, string token = null, CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        
        /// <param name='request'>
        /// Required.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<ShotOverviewResponse>>> GetFavouritesWithOperationResponseAsync(FavouritesGetRequest request, string id, CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        
        /// <param name='date'>
        /// Optional. Date
        /// </param>
        /// <param name='start'>
        /// Optional. Start element
        /// </param>
        /// <param name='limit'>
        /// Optional. Max number of element
        /// </param>
        /// <param name='token'>
        /// Optional. Session token
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<ShotOverviewResponse>>> GetFeatureFilmsWithOperationResponseAsync(DateTimeOffset? date = null, int? start = null, int? limit = null, string token = null, CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        
        /// <param name='start'>
        /// Optional. Start element
        /// </param>
        /// <param name='limit'>
        /// Optional. Max number of element
        /// </param>
        /// <param name='token'>
        /// Optional. Session token
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<ShotOverviewResponse>>> GetNewSubmissionsWithOperationResponseAsync(int? start = null, int? limit = null, string token = null, CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        
        /// <param name='token'>
        /// Optional. Session token
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        Task<HttpOperationResponse<ShotResponse>> GetRandomWithOperationResponseAsync(string token = null, CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        
        /// <param name='id'>
        /// Required. Shot ID
        /// </param>
        /// <param name='token'>
        /// Required. Session token
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetSolutionWithOperationResponseAsync(int id, string token, CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        
        /// <param name='id'>
        /// Required. Shot ID
        /// </param>
        /// <param name='request'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GuessSolutionWithOperationResponseAsync(int id, GuessSolutionRequest request, CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        
        /// <param name='id'>
        /// Required. Shot ID
        /// </param>
        /// <param name='request'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> RateWithOperationResponseAsync(int id, RateRequest request, CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    }
}
