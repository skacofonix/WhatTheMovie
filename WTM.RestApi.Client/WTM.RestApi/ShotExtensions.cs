// Code generated by Microsoft (R) AutoRest Code Generator 0.9.7.0
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Rest;
using WTM.RestApi.Client;
using WTM.RestApi.Client.Models;

namespace WTM.RestApi.Client
{
    public static partial class ShotExtensions
    {
        /// <param name='operations'>
        /// Reference to the WTM.RestApi.Client.IShot.
        /// </param>
        /// <param name='id'>
        /// Required. Shot ID
        /// </param>
        /// <param name='request'>
        /// Required.
        /// </param>
        public static bool AddBookmarks(this IShot operations, int id, BookmarksAddRequest request)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IShot)s).AddBookmarksAsync(id, request);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the WTM.RestApi.Client.IShot.
        /// </param>
        /// <param name='id'>
        /// Required. Shot ID
        /// </param>
        /// <param name='request'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<bool> AddBookmarksAsync(this IShot operations, int id, BookmarksAddRequest request, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<bool> result = await operations.AddBookmarksWithOperationResponseAsync(id, request, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the WTM.RestApi.Client.IShot.
        /// </param>
        /// <param name='id'>
        /// Required. Shot ID
        /// </param>
        /// <param name='request'>
        /// Required.
        /// </param>
        public static bool AddFavourite(this IShot operations, int id, FavouritesAddRequest request)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IShot)s).AddFavouriteAsync(id, request);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the WTM.RestApi.Client.IShot.
        /// </param>
        /// <param name='id'>
        /// Required. Shot ID
        /// </param>
        /// <param name='request'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<bool> AddFavouriteAsync(this IShot operations, int id, FavouritesAddRequest request, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<bool> result = await operations.AddFavouriteWithOperationResponseAsync(id, request, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the WTM.RestApi.Client.IShot.
        /// </param>
        /// <param name='id'>
        /// Required. Shot ID
        /// </param>
        /// <param name='request'>
        /// Required.
        /// </param>
        public static bool AddTag(this IShot operations, int id, TagsAddRequest request)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IShot)s).AddTagAsync(id, request);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the WTM.RestApi.Client.IShot.
        /// </param>
        /// <param name='id'>
        /// Required. Shot ID
        /// </param>
        /// <param name='request'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<bool> AddTagAsync(this IShot operations, int id, TagsAddRequest request, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<bool> result = await operations.AddTagWithOperationResponseAsync(id, request, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the WTM.RestApi.Client.IShot.
        /// </param>
        /// <param name='id'>
        /// Required. Shot ID
        /// </param>
        /// <param name='request'>
        /// Required.
        /// </param>
        public static bool DeleteBookmark(this IShot operations, int id, BookmarksDeleteRequest request)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IShot)s).DeleteBookmarkAsync(id, request);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the WTM.RestApi.Client.IShot.
        /// </param>
        /// <param name='id'>
        /// Required. Shot ID
        /// </param>
        /// <param name='request'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<bool> DeleteBookmarkAsync(this IShot operations, int id, BookmarksDeleteRequest request, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<bool> result = await operations.DeleteBookmarkWithOperationResponseAsync(id, request, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the WTM.RestApi.Client.IShot.
        /// </param>
        /// <param name='id'>
        /// Required. Shot ID
        /// </param>
        /// <param name='request'>
        /// Required.
        /// </param>
        public static bool DeleteFavourite(this IShot operations, int id, FavouritesDeleteRequest request)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IShot)s).DeleteFavouriteAsync(id, request);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the WTM.RestApi.Client.IShot.
        /// </param>
        /// <param name='id'>
        /// Required. Shot ID
        /// </param>
        /// <param name='request'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<bool> DeleteFavouriteAsync(this IShot operations, int id, FavouritesDeleteRequest request, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<bool> result = await operations.DeleteFavouriteWithOperationResponseAsync(id, request, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the WTM.RestApi.Client.IShot.
        /// </param>
        /// <param name='id'>
        /// Required. Shot ID
        /// </param>
        /// <param name='request'>
        /// Required.
        /// </param>
        public static bool DeleteTag(this IShot operations, int id, TagsAddRequest request)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IShot)s).DeleteTagAsync(id, request);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the WTM.RestApi.Client.IShot.
        /// </param>
        /// <param name='id'>
        /// Required. Shot ID
        /// </param>
        /// <param name='request'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<bool> DeleteTagAsync(this IShot operations, int id, TagsAddRequest request, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<bool> result = await operations.DeleteTagWithOperationResponseAsync(id, request, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the WTM.RestApi.Client.IShot.
        /// </param>
        /// <param name='date'>
        /// Required. Date
        /// </param>
        /// <param name='start'>
        /// Optional.
        /// </param>
        /// <param name='limit'>
        /// Optional.
        /// </param>
        /// <param name='token'>
        /// Optional. Session token
        /// </param>
        public static IList<ShotOverviewResponse> FindByDate(this IShot operations, DateTimeOffset date, int? start = null, int? limit = null, string token = null)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IShot)s).FindByDateAsync(date, start, limit, token);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the WTM.RestApi.Client.IShot.
        /// </param>
        /// <param name='date'>
        /// Required. Date
        /// </param>
        /// <param name='start'>
        /// Optional.
        /// </param>
        /// <param name='limit'>
        /// Optional.
        /// </param>
        /// <param name='token'>
        /// Optional. Session token
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<IList<ShotOverviewResponse>> FindByDateAsync(this IShot operations, DateTimeOffset date, int? start = null, int? limit = null, string token = null, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<System.Collections.Generic.IList<WTM.RestApi.Client.Models.ShotOverviewResponse>> result = await operations.FindByDateWithOperationResponseAsync(date, start, limit, token, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the WTM.RestApi.Client.IShot.
        /// </param>
        /// <param name='name'>
        /// Required. Movie name
        /// </param>
        /// <param name='token'>
        /// Optional. Session token
        /// </param>
        public static IList<ShotOverviewResponse> FindByMovie(this IShot operations, string name, string token = null)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IShot)s).FindByMovieAsync(name, token);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the WTM.RestApi.Client.IShot.
        /// </param>
        /// <param name='name'>
        /// Required. Movie name
        /// </param>
        /// <param name='token'>
        /// Optional. Session token
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<IList<ShotOverviewResponse>> FindByMovieAsync(this IShot operations, string name, string token = null, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<System.Collections.Generic.IList<WTM.RestApi.Client.Models.ShotOverviewResponse>> result = await operations.FindByMovieWithOperationResponseAsync(name, token, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the WTM.RestApi.Client.IShot.
        /// </param>
        /// <param name='tags'>
        /// Required. Tags
        /// </param>
        /// <param name='start'>
        /// Optional.
        /// </param>
        /// <param name='limit'>
        /// Optional.
        /// </param>
        /// <param name='token'>
        /// Optional. Session token
        /// </param>
        public static IList<ShotOverviewResponse> FindByTag(this IShot operations, string tags, int? start = null, int? limit = null, string token = null)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IShot)s).FindByTagAsync(tags, start, limit, token);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the WTM.RestApi.Client.IShot.
        /// </param>
        /// <param name='tags'>
        /// Required. Tags
        /// </param>
        /// <param name='start'>
        /// Optional.
        /// </param>
        /// <param name='limit'>
        /// Optional.
        /// </param>
        /// <param name='token'>
        /// Optional. Session token
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<IList<ShotOverviewResponse>> FindByTagAsync(this IShot operations, string tags, int? start = null, int? limit = null, string token = null, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<System.Collections.Generic.IList<WTM.RestApi.Client.Models.ShotOverviewResponse>> result = await operations.FindByTagWithOperationResponseAsync(tags, start, limit, token, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the WTM.RestApi.Client.IShot.
        /// </param>
        /// <param name='date'>
        /// Optional. Date
        /// </param>
        /// <param name='start'>
        /// Optional. Start element
        /// </param>
        /// <param name='limit'>
        /// Optional. Max number of element
        /// </param>
        /// <param name='token'>
        /// Optional. Session token
        /// </param>
        public static IList<ShotOverviewResponse> GetArchives(this IShot operations, DateTimeOffset? date = null, int? start = null, int? limit = null, string token = null)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IShot)s).GetArchivesAsync(date, start, limit, token);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the WTM.RestApi.Client.IShot.
        /// </param>
        /// <param name='date'>
        /// Optional. Date
        /// </param>
        /// <param name='start'>
        /// Optional. Start element
        /// </param>
        /// <param name='limit'>
        /// Optional. Max number of element
        /// </param>
        /// <param name='token'>
        /// Optional. Session token
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<IList<ShotOverviewResponse>> GetArchivesAsync(this IShot operations, DateTimeOffset? date = null, int? start = null, int? limit = null, string token = null, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<System.Collections.Generic.IList<WTM.RestApi.Client.Models.ShotOverviewResponse>> result = await operations.GetArchivesWithOperationResponseAsync(date, start, limit, token, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the WTM.RestApi.Client.IShot.
        /// </param>
        /// <param name='request'>
        /// Required.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        public static IList<ShotOverviewResponse> GetBookmarks(this IShot operations, BookmarksGetRequest request, string id)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IShot)s).GetBookmarksAsync(request, id);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the WTM.RestApi.Client.IShot.
        /// </param>
        /// <param name='request'>
        /// Required.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<IList<ShotOverviewResponse>> GetBookmarksAsync(this IShot operations, BookmarksGetRequest request, string id, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<System.Collections.Generic.IList<WTM.RestApi.Client.Models.ShotOverviewResponse>> result = await operations.GetBookmarksWithOperationResponseAsync(request, id, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the WTM.RestApi.Client.IShot.
        /// </param>
        /// <param name='id'>
        /// Required. Shot ID
        /// </param>
        /// <param name='token'>
        /// Optional. Session token
        /// </param>
        public static object GetById(this IShot operations, int id, string token = null)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IShot)s).GetByIdAsync(id, token);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the WTM.RestApi.Client.IShot.
        /// </param>
        /// <param name='id'>
        /// Required. Shot ID
        /// </param>
        /// <param name='token'>
        /// Optional. Session token
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<object> GetByIdAsync(this IShot operations, int id, string token = null, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<object> result = await operations.GetByIdWithOperationResponseAsync(id, token, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the WTM.RestApi.Client.IShot.
        /// </param>
        /// <param name='request'>
        /// Required.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        public static IList<ShotOverviewResponse> GetFavourites(this IShot operations, FavouritesGetRequest request, string id)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IShot)s).GetFavouritesAsync(request, id);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the WTM.RestApi.Client.IShot.
        /// </param>
        /// <param name='request'>
        /// Required.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<IList<ShotOverviewResponse>> GetFavouritesAsync(this IShot operations, FavouritesGetRequest request, string id, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<System.Collections.Generic.IList<WTM.RestApi.Client.Models.ShotOverviewResponse>> result = await operations.GetFavouritesWithOperationResponseAsync(request, id, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the WTM.RestApi.Client.IShot.
        /// </param>
        /// <param name='date'>
        /// Optional. Date
        /// </param>
        /// <param name='start'>
        /// Optional. Start element
        /// </param>
        /// <param name='limit'>
        /// Optional. Max number of element
        /// </param>
        /// <param name='token'>
        /// Optional. Session token
        /// </param>
        public static IList<ShotOverviewResponse> GetFeatureFilms(this IShot operations, DateTimeOffset? date = null, int? start = null, int? limit = null, string token = null)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IShot)s).GetFeatureFilmsAsync(date, start, limit, token);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the WTM.RestApi.Client.IShot.
        /// </param>
        /// <param name='date'>
        /// Optional. Date
        /// </param>
        /// <param name='start'>
        /// Optional. Start element
        /// </param>
        /// <param name='limit'>
        /// Optional. Max number of element
        /// </param>
        /// <param name='token'>
        /// Optional. Session token
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<IList<ShotOverviewResponse>> GetFeatureFilmsAsync(this IShot operations, DateTimeOffset? date = null, int? start = null, int? limit = null, string token = null, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<System.Collections.Generic.IList<WTM.RestApi.Client.Models.ShotOverviewResponse>> result = await operations.GetFeatureFilmsWithOperationResponseAsync(date, start, limit, token, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the WTM.RestApi.Client.IShot.
        /// </param>
        /// <param name='start'>
        /// Optional. Start element
        /// </param>
        /// <param name='limit'>
        /// Optional. Max number of element
        /// </param>
        /// <param name='token'>
        /// Optional. Session token
        /// </param>
        public static IList<ShotOverviewResponse> GetNewSubmissions(this IShot operations, int? start = null, int? limit = null, string token = null)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IShot)s).GetNewSubmissionsAsync(start, limit, token);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the WTM.RestApi.Client.IShot.
        /// </param>
        /// <param name='start'>
        /// Optional. Start element
        /// </param>
        /// <param name='limit'>
        /// Optional. Max number of element
        /// </param>
        /// <param name='token'>
        /// Optional. Session token
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<IList<ShotOverviewResponse>> GetNewSubmissionsAsync(this IShot operations, int? start = null, int? limit = null, string token = null, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<System.Collections.Generic.IList<WTM.RestApi.Client.Models.ShotOverviewResponse>> result = await operations.GetNewSubmissionsWithOperationResponseAsync(start, limit, token, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the WTM.RestApi.Client.IShot.
        /// </param>
        /// <param name='token'>
        /// Optional. Session token
        /// </param>
        public static ShotResponse GetRandom(this IShot operations, string token = null)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IShot)s).GetRandomAsync(token);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the WTM.RestApi.Client.IShot.
        /// </param>
        /// <param name='token'>
        /// Optional. Session token
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<ShotResponse> GetRandomAsync(this IShot operations, string token = null, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<WTM.RestApi.Client.Models.ShotResponse> result = await operations.GetRandomWithOperationResponseAsync(token, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the WTM.RestApi.Client.IShot.
        /// </param>
        /// <param name='id'>
        /// Required. Shot ID
        /// </param>
        /// <param name='token'>
        /// Required. Session token
        /// </param>
        public static object GetSolution(this IShot operations, int id, string token)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IShot)s).GetSolutionAsync(id, token);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the WTM.RestApi.Client.IShot.
        /// </param>
        /// <param name='id'>
        /// Required. Shot ID
        /// </param>
        /// <param name='token'>
        /// Required. Session token
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<object> GetSolutionAsync(this IShot operations, int id, string token, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<object> result = await operations.GetSolutionWithOperationResponseAsync(id, token, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the WTM.RestApi.Client.IShot.
        /// </param>
        /// <param name='id'>
        /// Required. Shot ID
        /// </param>
        /// <param name='request'>
        /// Required.
        /// </param>
        public static object GuessSolution(this IShot operations, int id, GuessSolutionRequest request)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IShot)s).GuessSolutionAsync(id, request);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the WTM.RestApi.Client.IShot.
        /// </param>
        /// <param name='id'>
        /// Required. Shot ID
        /// </param>
        /// <param name='request'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<object> GuessSolutionAsync(this IShot operations, int id, GuessSolutionRequest request, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<object> result = await operations.GuessSolutionWithOperationResponseAsync(id, request, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the WTM.RestApi.Client.IShot.
        /// </param>
        /// <param name='id'>
        /// Required. Shot ID
        /// </param>
        /// <param name='request'>
        /// Required.
        /// </param>
        public static object Rate(this IShot operations, int id, RateRequest request)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IShot)s).RateAsync(id, request);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the WTM.RestApi.Client.IShot.
        /// </param>
        /// <param name='id'>
        /// Required. Shot ID
        /// </param>
        /// <param name='request'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<object> RateAsync(this IShot operations, int id, RateRequest request, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<object> result = await operations.RateWithOperationResponseAsync(id, request, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
    }
}
