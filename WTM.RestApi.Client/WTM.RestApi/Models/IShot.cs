// Code generated by Microsoft (R) AutoRest Code Generator 0.9.7.0
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

using System;
using System.Collections.Generic;
using System.Linq;
using Microsoft.Rest;
using Newtonsoft.Json.Linq;

namespace WTM.RestApi.Client.Models
{
    public partial class IShot
    {
        private string _firstSolver;
        
        /// <summary>
        /// Optional.
        /// </summary>
        public string FirstSolver
        {
            get { return this._firstSolver; }
            set { this._firstSolver = value; }
        }
        
        private string _imageUri;
        
        /// <summary>
        /// Optional.
        /// </summary>
        public string ImageUri
        {
            get { return this._imageUri; }
            set { this._imageUri = value; }
        }
        
        private bool? _isBookmarked;
        
        /// <summary>
        /// Optional.
        /// </summary>
        public bool? IsBookmarked
        {
            get { return this._isBookmarked; }
            set { this._isBookmarked = value; }
        }
        
        private bool? _isFavourited;
        
        /// <summary>
        /// Optional.
        /// </summary>
        public bool? IsFavourited
        {
            get { return this._isFavourited; }
            set { this._isFavourited = value; }
        }
        
        private bool? _isGore;
        
        /// <summary>
        /// Optional.
        /// </summary>
        public bool? IsGore
        {
            get { return this._isGore; }
            set { this._isGore = value; }
        }
        
        private bool? _isNudity;
        
        /// <summary>
        /// Optional.
        /// </summary>
        public bool? IsNudity
        {
            get { return this._isNudity; }
            set { this._isNudity = value; }
        }
        
        private bool? _isSolutionAvailable;
        
        /// <summary>
        /// Optional.
        /// </summary>
        public bool? IsSolutionAvailable
        {
            get { return this._isSolutionAvailable; }
            set { this._isSolutionAvailable = value; }
        }
        
        private bool? _isVoteDeletation;
        
        /// <summary>
        /// Optional.
        /// </summary>
        public bool? IsVoteDeletation
        {
            get { return this._isVoteDeletation; }
            set { this._isVoteDeletation = value; }
        }
        
        private IList<string> _languages;
        
        /// <summary>
        /// Optional.
        /// </summary>
        public IList<string> Languages
        {
            get { return this._languages; }
            set { this._languages = value; }
        }
        
        private string _movieId;
        
        /// <summary>
        /// Optional.
        /// </summary>
        public string MovieId
        {
            get { return this._movieId; }
            set { this._movieId = value; }
        }
        
        private int? _nbSolver;
        
        /// <summary>
        /// Optional.
        /// </summary>
        public int? NbSolver
        {
            get { return this._nbSolver; }
            set { this._nbSolver = value; }
        }
        
        private int? _numberOfDayBeforeSolution;
        
        /// <summary>
        /// Optional.
        /// </summary>
        public int? NumberOfDayBeforeSolution
        {
            get { return this._numberOfDayBeforeSolution; }
            set { this._numberOfDayBeforeSolution = value; }
        }
        
        private int? _numberOfFavourited;
        
        /// <summary>
        /// Optional.
        /// </summary>
        public int? NumberOfFavourited
        {
            get { return this._numberOfFavourited; }
            set { this._numberOfFavourited = value; }
        }
        
        private string _poster;
        
        /// <summary>
        /// Optional.
        /// </summary>
        public string Poster
        {
            get { return this._poster; }
            set { this._poster = value; }
        }
        
        private DateTimeOffset? _publidationDate;
        
        /// <summary>
        /// Optional.
        /// </summary>
        public DateTimeOffset? PublidationDate
        {
            get { return this._publidationDate; }
            set { this._publidationDate = value; }
        }
        
        private int? _shotId;
        
        /// <summary>
        /// Optional.
        /// </summary>
        public int? ShotId
        {
            get { return this._shotId; }
            set { this._shotId = value; }
        }
        
        private IList<string> _tags;
        
        /// <summary>
        /// Optional.
        /// </summary>
        public IList<string> Tags
        {
            get { return this._tags; }
            set { this._tags = value; }
        }
        
        private string _updater;
        
        /// <summary>
        /// Optional.
        /// </summary>
        public string Updater
        {
            get { return this._updater; }
            set { this._updater = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the IShot class.
        /// </summary>
        public IShot()
        {
            this.Languages = new LazyList<string>();
            this.Tags = new LazyList<string>();
        }
        
        /// <summary>
        /// Deserialize the object
        /// </summary>
        public virtual void DeserializeJson(JToken inputObject)
        {
            if (inputObject != null && inputObject.Type != JTokenType.Null)
            {
                JToken firstSolverValue = inputObject["FirstSolver"];
                if (firstSolverValue != null && firstSolverValue.Type != JTokenType.Null)
                {
                    this.FirstSolver = ((string)firstSolverValue);
                }
                JToken imageUriValue = inputObject["ImageUri"];
                if (imageUriValue != null && imageUriValue.Type != JTokenType.Null)
                {
                    this.ImageUri = ((string)imageUriValue);
                }
                JToken isBookmarkedValue = inputObject["IsBookmarked"];
                if (isBookmarkedValue != null && isBookmarkedValue.Type != JTokenType.Null)
                {
                    this.IsBookmarked = ((bool)isBookmarkedValue);
                }
                JToken isFavouritedValue = inputObject["IsFavourited"];
                if (isFavouritedValue != null && isFavouritedValue.Type != JTokenType.Null)
                {
                    this.IsFavourited = ((bool)isFavouritedValue);
                }
                JToken isGoreValue = inputObject["IsGore"];
                if (isGoreValue != null && isGoreValue.Type != JTokenType.Null)
                {
                    this.IsGore = ((bool)isGoreValue);
                }
                JToken isNudityValue = inputObject["IsNudity"];
                if (isNudityValue != null && isNudityValue.Type != JTokenType.Null)
                {
                    this.IsNudity = ((bool)isNudityValue);
                }
                JToken isSolutionAvailableValue = inputObject["IsSolutionAvailable"];
                if (isSolutionAvailableValue != null && isSolutionAvailableValue.Type != JTokenType.Null)
                {
                    this.IsSolutionAvailable = ((bool)isSolutionAvailableValue);
                }
                JToken isVoteDeletationValue = inputObject["IsVoteDeletation"];
                if (isVoteDeletationValue != null && isVoteDeletationValue.Type != JTokenType.Null)
                {
                    this.IsVoteDeletation = ((bool)isVoteDeletationValue);
                }
                JToken languagesSequence = ((JToken)inputObject["Languages"]);
                if (languagesSequence != null && languagesSequence.Type != JTokenType.Null)
                {
                    foreach (JToken languagesValue in ((JArray)languagesSequence))
                    {
                        this.Languages.Add(((string)languagesValue));
                    }
                }
                JToken movieIdValue = inputObject["MovieId"];
                if (movieIdValue != null && movieIdValue.Type != JTokenType.Null)
                {
                    this.MovieId = ((string)movieIdValue);
                }
                JToken nbSolverValue = inputObject["NbSolver"];
                if (nbSolverValue != null && nbSolverValue.Type != JTokenType.Null)
                {
                    this.NbSolver = ((int)nbSolverValue);
                }
                JToken numberOfDayBeforeSolutionValue = inputObject["NumberOfDayBeforeSolution"];
                if (numberOfDayBeforeSolutionValue != null && numberOfDayBeforeSolutionValue.Type != JTokenType.Null)
                {
                    this.NumberOfDayBeforeSolution = ((int)numberOfDayBeforeSolutionValue);
                }
                JToken numberOfFavouritedValue = inputObject["NumberOfFavourited"];
                if (numberOfFavouritedValue != null && numberOfFavouritedValue.Type != JTokenType.Null)
                {
                    this.NumberOfFavourited = ((int)numberOfFavouritedValue);
                }
                JToken posterValue = inputObject["Poster"];
                if (posterValue != null && posterValue.Type != JTokenType.Null)
                {
                    this.Poster = ((string)posterValue);
                }
                JToken publidationDateValue = inputObject["PublidationDate"];
                if (publidationDateValue != null && publidationDateValue.Type != JTokenType.Null)
                {
                    this.PublidationDate = ((DateTimeOffset)publidationDateValue);
                }
                JToken shotIdValue = inputObject["ShotId"];
                if (shotIdValue != null && shotIdValue.Type != JTokenType.Null)
                {
                    this.ShotId = ((int)shotIdValue);
                }
                JToken tagsSequence = ((JToken)inputObject["Tags"]);
                if (tagsSequence != null && tagsSequence.Type != JTokenType.Null)
                {
                    foreach (JToken tagsValue in ((JArray)tagsSequence))
                    {
                        this.Tags.Add(((string)tagsValue));
                    }
                }
                JToken updaterValue = inputObject["Updater"];
                if (updaterValue != null && updaterValue.Type != JTokenType.Null)
                {
                    this.Updater = ((string)updaterValue);
                }
            }
        }
    }
}
