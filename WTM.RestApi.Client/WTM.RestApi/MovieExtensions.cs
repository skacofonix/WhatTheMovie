// Code generated by Microsoft (R) AutoRest Code Generator 0.9.7.0
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Rest;
using WTM.RestApi.Client;
using WTM.RestApi.Client.Models;

namespace WTM.RestApi.Client
{
    public static partial class MovieExtensions
    {
        /// <param name='operations'>
        /// Reference to the WTM.RestApi.Client.IMovie.
        /// </param>
        /// <param name='tags'>
        /// Required.
        /// </param>
        /// <param name='start'>
        /// Optional.
        /// </param>
        /// <param name='limit'>
        /// Optional.
        /// </param>
        /// <param name='token'>
        /// Optional.
        /// </param>
        public static IList<MovieOverviewResponse> FindByTag(this IMovie operations, IList<string> tags, int? start = null, int? limit = null, string token = null)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IMovie)s).FindByTagAsync(tags, start, limit, token);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the WTM.RestApi.Client.IMovie.
        /// </param>
        /// <param name='tags'>
        /// Required.
        /// </param>
        /// <param name='start'>
        /// Optional.
        /// </param>
        /// <param name='limit'>
        /// Optional.
        /// </param>
        /// <param name='token'>
        /// Optional.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<IList<MovieOverviewResponse>> FindByTagAsync(this IMovie operations, IList<string> tags, int? start = null, int? limit = null, string token = null, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<System.Collections.Generic.IList<WTM.RestApi.Client.Models.MovieOverviewResponse>> result = await operations.FindByTagWithOperationResponseAsync(tags, start, limit, token, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the WTM.RestApi.Client.IMovie.
        /// </param>
        /// <param name='name'>
        /// Required.
        /// </param>
        public static MovieResponse GetByName(this IMovie operations, string name)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IMovie)s).GetByNameAsync(name);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the WTM.RestApi.Client.IMovie.
        /// </param>
        /// <param name='name'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<MovieResponse> GetByNameAsync(this IMovie operations, string name, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<WTM.RestApi.Client.Models.MovieResponse> result = await operations.GetByNameWithOperationResponseAsync(name, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
    }
}
