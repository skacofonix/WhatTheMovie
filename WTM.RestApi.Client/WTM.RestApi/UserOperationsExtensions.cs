// Code generated by Microsoft (R) AutoRest Code Generator 0.9.7.0
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Rest;
using WTM.RestApi.Client;
using WTM.RestApi.Client.Models;

namespace WTM.RestApi.Client
{
    public static partial class UserOperationsExtensions
    {
        /// <param name='operations'>
        /// Reference to the WTM.RestApi.Client.IUserOperations.
        /// </param>
        /// <param name='username'>
        /// Required.
        /// </param>
        public static User Get(this IUserOperations operations, string username)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IUserOperations)s).GetAsync(username);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the WTM.RestApi.Client.IUserOperations.
        /// </param>
        /// <param name='username'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<User> GetAsync(this IUserOperations operations, string username, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<WTM.RestApi.Client.Models.User> result = await operations.GetWithOperationResponseAsync(username, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the WTM.RestApi.Client.IUserOperations.
        /// </param>
        /// <param name='username'>
        /// Required.
        /// </param>
        /// <param name='password'>
        /// Required.
        /// </param>
        public static LoginResponse Login(this IUserOperations operations, string username, string password)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IUserOperations)s).LoginAsync(username, password);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the WTM.RestApi.Client.IUserOperations.
        /// </param>
        /// <param name='username'>
        /// Required.
        /// </param>
        /// <param name='password'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<LoginResponse> LoginAsync(this IUserOperations operations, string username, string password, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<WTM.RestApi.Client.Models.LoginResponse> result = await operations.LoginWithOperationResponseAsync(username, password, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the WTM.RestApi.Client.IUserOperations.
        /// </param>
        /// <param name='token'>
        /// Required.
        /// </param>
        public static LogoutResponse Logout(this IUserOperations operations, string token)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IUserOperations)s).LogoutAsync(token);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the WTM.RestApi.Client.IUserOperations.
        /// </param>
        /// <param name='token'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<LogoutResponse> LogoutAsync(this IUserOperations operations, string token, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<WTM.RestApi.Client.Models.LogoutResponse> result = await operations.LogoutWithOperationResponseAsync(token, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
    }
}
