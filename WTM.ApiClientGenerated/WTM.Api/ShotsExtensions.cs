// Code generated by Microsoft (R) AutoRest Code Generator 0.9.7.0
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Rest;
using WTM.ApiClientGenerated;
using WTM.ApiClientGenerated.Models;

namespace WTM.ApiClientGenerated
{
    public static partial class ShotsExtensions
    {
        /// <param name='operations'>
        /// Reference to the WTM.ApiClientGenerated.IShots.
        /// </param>
        public static ShotCollectionResponse GetArchives(this IShots operations)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IShots)s).GetArchivesAsync();
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the WTM.ApiClientGenerated.IShots.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<ShotCollectionResponse> GetArchivesAsync(this IShots operations, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<WTM.ApiClientGenerated.Models.ShotCollectionResponse> result = await operations.GetArchivesWithOperationResponseAsync(cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the WTM.ApiClientGenerated.IShots.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        public static ShotResponse GetById(this IShots operations, int id)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IShots)s).GetByIdAsync(id);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the WTM.ApiClientGenerated.IShots.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<ShotResponse> GetByIdAsync(this IShots operations, int id, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<WTM.ApiClientGenerated.Models.ShotResponse> result = await operations.GetByIdWithOperationResponseAsync(id, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the WTM.ApiClientGenerated.IShots.
        /// </param>
        public static ShotCollectionResponse GetFeatureFilms(this IShots operations)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IShots)s).GetFeatureFilmsAsync();
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the WTM.ApiClientGenerated.IShots.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<ShotCollectionResponse> GetFeatureFilmsAsync(this IShots operations, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<WTM.ApiClientGenerated.Models.ShotCollectionResponse> result = await operations.GetFeatureFilmsWithOperationResponseAsync(cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the WTM.ApiClientGenerated.IShots.
        /// </param>
        /// <param name='id'>
        /// Required. Shot ID
        /// </param>
        public static string GetImage(this IShots operations, int id)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IShots)s).GetImageAsync(id);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the WTM.ApiClientGenerated.IShots.
        /// </param>
        /// <param name='id'>
        /// Required. Shot ID
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<string> GetImageAsync(this IShots operations, int id, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<string> result = await operations.GetImageWithOperationResponseAsync(id, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the WTM.ApiClientGenerated.IShots.
        /// </param>
        public static ShotCollectionResponse GetNewSubmissions(this IShots operations)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IShots)s).GetNewSubmissionsAsync();
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the WTM.ApiClientGenerated.IShots.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<ShotCollectionResponse> GetNewSubmissionsAsync(this IShots operations, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<WTM.ApiClientGenerated.Models.ShotCollectionResponse> result = await operations.GetNewSubmissionsWithOperationResponseAsync(cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the WTM.ApiClientGenerated.IShots.
        /// </param>
        public static ShotResponse GetRandom(this IShots operations)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IShots)s).GetRandomAsync();
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the WTM.ApiClientGenerated.IShots.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<ShotResponse> GetRandomAsync(this IShots operations, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<WTM.ApiClientGenerated.Models.ShotResponse> result = await operations.GetRandomWithOperationResponseAsync(cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the WTM.ApiClientGenerated.IShots.
        /// </param>
        public static ShotCollectionResponse GetShotCollection(this IShots operations)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IShots)s).GetShotCollectionAsync();
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the WTM.ApiClientGenerated.IShots.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<ShotCollectionResponse> GetShotCollectionAsync(this IShots operations, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<WTM.ApiClientGenerated.Models.ShotCollectionResponse> result = await operations.GetShotCollectionWithOperationResponseAsync(cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the WTM.ApiClientGenerated.IShots.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        public static ShotSolutionResponse GetSolution(this IShots operations, int id)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IShots)s).GetSolutionAsync(id);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the WTM.ApiClientGenerated.IShots.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<ShotSolutionResponse> GetSolutionAsync(this IShots operations, int id, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<WTM.ApiClientGenerated.Models.ShotSolutionResponse> result = await operations.GetSolutionWithOperationResponseAsync(id, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the WTM.ApiClientGenerated.IShots.
        /// </param>
        /// <param name='id'>
        /// Required. Shot ID
        /// </param>
        public static string GetThumbnail(this IShots operations, int id)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IShots)s).GetThumbnailAsync(id);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the WTM.ApiClientGenerated.IShots.
        /// </param>
        /// <param name='id'>
        /// Required. Shot ID
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<string> GetThumbnailAsync(this IShots operations, int id, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<string> result = await operations.GetThumbnailWithOperationResponseAsync(id, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the WTM.ApiClientGenerated.IShots.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='request'>
        /// Required.
        /// </param>
        public static ShotGuessTitleResponse GuessTitle(this IShots operations, int id, GuessSolutionRequest request)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IShots)s).GuessTitleAsync(id, request);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the WTM.ApiClientGenerated.IShots.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='request'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<ShotGuessTitleResponse> GuessTitleAsync(this IShots operations, int id, GuessSolutionRequest request, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<WTM.ApiClientGenerated.Models.ShotGuessTitleResponse> result = await operations.GuessTitleWithOperationResponseAsync(id, request, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the WTM.ApiClientGenerated.IShots.
        /// </param>
        public static ShotResponse Search(this IShots operations)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IShots)s).SearchAsync();
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the WTM.ApiClientGenerated.IShots.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<ShotResponse> SearchAsync(this IShots operations, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<WTM.ApiClientGenerated.Models.ShotResponse> result = await operations.SearchWithOperationResponseAsync(cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
    }
}
